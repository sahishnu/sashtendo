{"version":3,"sources":["sketch.js","Gameboy.js","App.js","serviceWorker.js","index.js"],"names":["sketch","p","canvas","posX","posY","vel","createVector","setup","createCanvas","frameRate","noStroke","draw","background","i","j","stroke","strokeWeight","point","drawGrid","x","y","size","constrain","keyPressed","keyCode","UP_ARROW","key","console","log","set","DOWN_ARROW","LEFT_ARROW","RIGHT_ARROW","myCustomRedrawAccordingToNewPropsHandler","newProps","fill","color","Gameboy","className","style","marginRight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQAAe,SAASA,EAAOC,GAC7B,IAAIC,EAMAC,EALe,EAMfC,EANe,EAObC,EAAMJ,EAAEK,aAAa,EAAG,GAgD9BL,EAAEM,MAAQ,WACRL,EAASD,EAAEO,aAvDA,SAwDXP,EAAEQ,UAvDc,IAwDhBR,EAAES,YAGJT,EAAEU,KAAO,WAEPV,EAAEW,WAAW,SA/CE,WAMf,IAAK,IAAIC,EAtBQ,IAsBQA,EArBd,IAqBmCA,GAtB7B,EAuBf,IAAK,IAAIC,EAvBM,IAuBUA,EAtBhB,IAsBqCA,GAvB/B,EAyBTX,IAASU,GAAKT,IAASU,GACzBb,EAAEc,OAAO,SACTd,EAAEe,aAAa,MAEff,EAAEc,OAAO,4BACTd,EAAEe,aAAa,IAEjBf,EAAEgB,MAhCW,EAgCLJ,EAhCK,EAgCQC,GAgCzBI,GAEAf,GAlEiB,EAkEHE,EAAIc,EAClBf,GAnEiB,EAmEHC,EAAIe,EA7BdjB,EAtCa,IAuCfA,EAnCWkB,IAsCTlB,EAtCSkB,KAuCXlB,EA3Ce,GA8CbC,EA9Ca,IA+CfA,EA3CWiB,IA8CTjB,EA9CSiB,KA+CXjB,EAnDe,GAwEjBD,EAAOF,EAAEqB,UAAUnB,EAxEF,EAIJkB,IAqEbjB,EAAOH,EAAEqB,UAAUlB,EAzEF,EAIJiB,KAwEfpB,EAAEsB,WAAa,WACTtB,EAAEuB,UAAYvB,EAAEwB,UAAsB,MAAVxB,EAAEyB,MAChCC,QAAQC,IAAI,MAEZvB,EAAIwB,IAAI,GAAI,IAEV5B,EAAEuB,UAAYvB,EAAE6B,YAAwB,MAAV7B,EAAEyB,MAClCC,QAAQC,IAAI,QAEZvB,EAAIwB,IAAI,EAAG,IAET5B,EAAEuB,UAAYvB,EAAE8B,YAAwB,MAAV9B,EAAEyB,MAClCC,QAAQC,IAAI,QAEZvB,EAAIwB,KAAK,EAAG,IAEV5B,EAAEuB,UAAYvB,EAAE+B,aAAyB,MAAV/B,EAAEyB,MACnCC,QAAQC,IAAI,SAEZvB,EAAIwB,IAAI,EAAG,KAIf5B,EAAEgC,yCAA2C,SAACC,GACzChC,GACDD,EAAEkC,KAAKD,EAASE,Q,MClDPC,MAhDf,WACE,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,eAAf,UAEF,yBAAKA,UAAU,UACb,kBAAC,IAAD,CAAWtC,OAAQA,KAErB,yBAAKsC,UAAU,gBACb,0BAAMA,UAAU,qBAAhB,aAAoD,0BAAMA,UAAU,oBAAhB,UAGxD,yBAAKA,UAAU,WAAf,aAGA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,2BAMf,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,iBAAf,MAEF,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,iBAAf,OAGJ,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,2BAA2BC,MAAO,CAACC,YAAa,SAC7D,yBAAKF,UAAU,0BACf,yBAAKA,UAAU,4BAAf,WAEF,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,4BAAf,aClCKG,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCKcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.14a5433d.chunk.js","sourcesContent":["export default function sketch(p){\n  let canvas;\n  const resolution = 5;\n  const size = 325;\n  const frameRate = 10;\n  const minPos = resolution;\n  const maxPos = size/resolution - resolution;\n  let posX = resolution;\n  let posY = resolution;\n  const vel = p.createVector(0 ,0);\n\n  const reset = () => {\n    posX = resolution;\n    posY = resolution;\n    vel.set(0, 0);\n  }\n\n  // draw points at increments of 25px\n  const drawGrid = () => {\n    // i = 5, j = 5 --> plot at (25, 25)\n    // i = 5, j = 10 --> plot at (25, 50)\n    // i = 5, j = 15 --> plot at (25, 75)\n    // i = 5, j = 20 --> plot at (25, 100)\n    // ...etc\n    for (let i = resolution; i*resolution < size; i+=resolution) {\n      for (let j = resolution; j*resolution < size; j+=resolution) {\n        // if (pos.x === i && pos.y === j) {\n        if (posX === i && posY === j) {\n          p.stroke('white');\n          p.strokeWeight(10);\n        } else {\n          p.stroke('rgba(170, 170, 170,0.25)');\n          p.strokeWeight(5);\n        }\n        p.point(i*resolution,j*resolution);\n      }\n    }\n  }\n\n  const edgeCollideCheck = () => {\n    if (posX < minPos) {\n      posX = maxPos;\n    }\n\n    if (posX > maxPos) {\n      posX = minPos;\n    }\n\n    if (posY < minPos) {\n      posY = maxPos;\n    }\n\n    if (posY > maxPos) {\n      posY = minPos;\n    }\n  }\n\n  p.setup = () => {\n    canvas = p.createCanvas(size, size);\n    p.frameRate(frameRate);\n    p.noStroke();\n  }\n\n  p.draw = () => {\n\n    p.background('black');\n    drawGrid();\n\n    posX = posX + vel.x*resolution;\n    posY = posY + vel.y*resolution;\n\n    edgeCollideCheck();\n\n    // dont let pos values go beyond constraint\n    posX = p.constrain(posX, minPos, maxPos);\n    posY = p.constrain(posY, minPos, maxPos);\n  }\n\n  p.keyPressed = () => {\n    if (p.keyCode === p.UP_ARROW || p.key === 'w') {\n      console.log('up');\n      // posY = posY - resolution;\n      vel.set(0, -1);\n    }\n    if (p.keyCode === p.DOWN_ARROW || p.key === 's') {\n      console.log('down');\n      // posY = posY + resolution;\n      vel.set(0, 1);\n    }\n    if (p.keyCode === p.LEFT_ARROW || p.key === 'a') {\n      console.log('left');\n      // posX = posX - resolution;\n      vel.set(-1, 0);\n    }\n    if (p.keyCode === p.RIGHT_ARROW || p.key === 'd') {\n      console.log('right');\n      // posX = posX + resolution;\n      vel.set(1, 0);\n    }\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    if(canvas) //Make sure the canvas has been created\n      p.fill(newProps.color);\n  }\n}","import React from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\nimport sketch from './sketch';\nimport './Gameboy.scss';\n\nfunction Gameboy() {\n  return (\n    <div className=\"Gameboy\">\n      <div className=\"screen-container\">\n        <div className=\"screen-power-indicator\">\n          <div className=\"screen-power-light\"></div>\n          <div className=\"power-title\">Power</div>\n        </div>\n        <div className=\"screen\">\n          <P5Wrapper sketch={sketch} />\n        </div>\n        <div className=\"screen-title\">\n          <span className=\"screen-title-main\">Sashtendo</span><span className=\"screen-title-sub\">beta</span>\n        </div>\n      </div>\n      <div className=\"etching\">\n        @sahishnu\n      </div>\n      <div className=\"controls-row\">\n        <div className=\"d-pad-container button\">\n          {/* <div className=\"d-pad\">\n            <div className=\"d-pad-horizontal button\"></div>\n            <div className=\"d-pad-vertical button\"></div>\n          </div> */}\n        </div>\n        <div className=\"a-button-container\">\n          <div className=\"a-button button\"></div>\n          <div className=\"button-letter\">A</div>\n        </div>\n        <div className=\"b-button-container\">\n          <div className=\"b-button button\"></div>\n          <div className=\"button-letter\">B</div>\n        </div>\n      </div>\n      <div className=\"settings-row\">\n        <div className=\"setting-button-container\" style={{marginRight: '16px'}}>\n          <div className=\"setting-button button\"></div>\n          <div className=\"setting-button-lettering\">Select</div>\n        </div>\n        <div className=\"setting-button-container\">\n          <div className=\"setting-button button\"></div>\n          <div className=\"setting-button-lettering\">Start</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Gameboy;\n","import React from 'react';\nimport './App.scss';\nimport Gameboy from './Gameboy';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Gameboy />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}