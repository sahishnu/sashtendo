{"version":3,"sources":["sketch.js","Gameboy.js","App.js","serviceWorker.js","index.js"],"names":["sketch","p","canvas","x","y","setup","createCanvas","noStroke","width","height","draw","background","stroke","fill","ellipse","myCustomRedrawAccordingToNewPropsHandler","newProps","color","Gameboy","className","style","marginRight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAAe,SAASA,EAAOC,GAC7B,IAAIC,EAAQC,EAAGC,EAEfH,EAAEI,MAAQ,WACRH,EAASD,EAAEK,aAAa,IAAK,KAC7BL,EAAEM,WACFJ,EAAIF,EAAEO,MAAM,EACZJ,EAAIH,EAAEQ,OAAS,IAGjBR,EAAES,KAAO,WACPT,EAAEU,WAAW,SAEbV,EAAEW,OAAO,IACTX,EAAEY,KAAK,KACPZ,EAAEa,QAAQX,EAAGC,EAAG,GAAI,IAEpBA,GAAQ,GACRD,GAAQ,IAEC,KACPA,EAAIF,EAAEQ,QAGJL,GAAK,KACPA,EAAIH,EAAEQ,SAIVR,EAAEc,yCAA2C,SAACC,GACzCd,GACDD,EAAEY,KAAKG,EAASC,Q,MCsBPC,MAhDf,WACE,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,eAAf,UAEF,yBAAKA,UAAU,UACb,kBAAC,IAAD,CAAWnB,OAAQA,KAErB,yBAAKmB,UAAU,gBACb,0BAAMA,UAAU,qBAAhB,aAAoD,0BAAMA,UAAU,oBAAhB,UAMxD,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,2BAMf,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,iBAAf,MAEF,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,iBAAf,OAGJ,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,2BAA2BC,MAAO,CAACC,YAAa,SAC7D,yBAAKF,UAAU,0BACf,yBAAKA,UAAU,4BAAf,WAEF,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,4BAAf,aClCKG,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCKcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a60fb97.chunk.js","sourcesContent":["export default function sketch(p){\n  let canvas, x, y;\n\n  p.setup = () => {\n    canvas = p.createCanvas(325, 325);\n    p.noStroke();\n    x = p.width/2;\n    y = p.height + 12;\n  }\n\n  p.draw = () => {\n    p.background('black');\n    // p.ellipse(150, 100, 100, 100);\n    p.stroke(50);\n    p.fill(100);\n    p.ellipse(x, y, 24, 24);\n\n    y = y - 1;\n    x = x - 1;\n\n    if (x < -12) {\n      x = p.height;\n    }\n\n    if (y < -12) {\n      y = p.height;\n    }\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    if(canvas) //Make sure the canvas has been created\n      p.fill(newProps.color);\n  }\n}","import React from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\nimport sketch from './sketch';\nimport './Gameboy.scss';\n\nfunction Gameboy() {\n  return (\n    <div className=\"Gameboy\">\n      <div className=\"screen-container\">\n        <div className=\"screen-power-indicator\">\n          <div className=\"screen-power-light\"></div>\n          <div className=\"power-title\">Power</div>\n        </div>\n        <div className=\"screen\">\n          <P5Wrapper sketch={sketch} />\n        </div>\n        <div className=\"screen-title\">\n          <span className=\"screen-title-main\">Sashtendo</span><span className=\"screen-title-sub\">beta</span>\n        </div>\n      </div>\n      {/* <div className=\"etching\">\n        @sahishnu\n      </div> */}\n      <div className=\"controls-row\">\n        <div className=\"d-pad-container button\">\n          {/* <div className=\"d-pad\">\n            <div className=\"d-pad-horizontal button\"></div>\n            <div className=\"d-pad-vertical button\"></div>\n          </div> */}\n        </div>\n        <div className=\"a-button-container\">\n          <div className=\"a-button button\"></div>\n          <div className=\"button-letter\">A</div>\n        </div>\n        <div className=\"b-button-container\">\n          <div className=\"b-button button\"></div>\n          <div className=\"button-letter\">B</div>\n        </div>\n      </div>\n      <div className=\"settings-row\">\n        <div className=\"setting-button-container\" style={{marginRight: '16px'}}>\n          <div className=\"setting-button button\"></div>\n          <div className=\"setting-button-lettering\">Select</div>\n        </div>\n        <div className=\"setting-button-container\">\n          <div className=\"setting-button button\"></div>\n          <div className=\"setting-button-lettering\">Start</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Gameboy;\n","import React from 'react';\nimport './App.scss';\nimport Gameboy from './Gameboy';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Gameboy />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}